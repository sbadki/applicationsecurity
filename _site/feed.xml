<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-02-08T18:26:15+08:00</updated><id>http://localhost:4000/feed.xml</id><entry><title type="html">Kiwifruit</title><link href="http://localhost:4000/2023/02/06/kiwifruit.html" rel="alternate" type="text/html" title="Kiwifruit" /><published>2023-02-06T00:00:00+08:00</published><updated>2023-02-06T00:00:00+08:00</updated><id>http://localhost:4000/2023/02/06/kiwifruit</id><content type="html" xml:base="http://localhost:4000/2023/02/06/kiwifruit.html"><![CDATA[<p>Kiwifruit (often abbreviated as kiwi), or Chinese gooseberry is the edible
berry of several species of woody vines in the genus Actinidia.</p>

<p>The most common cultivar group of kiwifruit is oval, about the size of a large
hen’s egg (5–8 cm (2.0–3.1 in) in length and 4.5–5.5 cm (1.8–2.2 in) in
diameter). It has a fibrous, dull greenish-brown skin and bright green or
golden flesh with rows of tiny, black, edible seeds. The fruit has a soft
texture, with a sweet and unique flavor.</p>]]></content><author><name>sbadki</name></author><summary type="html"><![CDATA[Kiwifruit (often abbreviated as kiwi), or Chinese gooseberry is the edible berry of several species of woody vines in the genus Actinidia.]]></summary></entry><entry><title type="html">Bananas</title><link href="http://localhost:4000/2023/02/06/bananas.html" rel="alternate" type="text/html" title="Bananas" /><published>2023-02-06T00:00:00+08:00</published><updated>2023-02-06T00:00:00+08:00</updated><id>http://localhost:4000/2023/02/06/bananas</id><content type="html" xml:base="http://localhost:4000/2023/02/06/bananas.html"><![CDATA[<p>A banana is an edible fruit – botanically a berry – produced by several kinds
of large herbaceous flowering plants in the genus Musa.</p>

<p>In some countries, bananas used for cooking may be called “plantains”,
distinguishing them from dessert bananas. The fruit is variable in size, color,
and firmness, but is usually elongated and curved, with soft flesh rich in
starch covered with a rind, which may be green, yellow, red, purple, or brown
when ripe.</p>]]></content><author><name>sbadki</name></author><summary type="html"><![CDATA[A banana is an edible fruit – botanically a berry – produced by several kinds of large herbaceous flowering plants in the genus Musa.]]></summary></entry><entry><title type="html">Apples</title><link href="http://localhost:4000/2023/02/06/apples.html" rel="alternate" type="text/html" title="Apples" /><published>2023-02-06T00:00:00+08:00</published><updated>2023-02-06T00:00:00+08:00</updated><id>http://localhost:4000/2023/02/06/apples</id><content type="html" xml:base="http://localhost:4000/2023/02/06/apples.html"><![CDATA[<p>An apple is a sweet, edible fruit produced by an apple tree.</p>

<p>Apple trees are cultivated worldwide, and are the most widely grown species in
the genus Malus. The tree originated in Central Asia, where its wild ancestor,
Malus sieversii, is still found today. Apples have been grown for thousands of
years in Asia and Europe, and were brought to North America by European
colonists.</p>]]></content><author><name>sbadki</name></author><summary type="html"><![CDATA[An apple is a sweet, edible fruit produced by an apple tree.]]></summary></entry><entry><title type="html">Rate Limiting API endpoints with Bucket4j</title><link href="http://localhost:4000/2023/01/31/ratelimiting.html" rel="alternate" type="text/html" title="Rate Limiting API endpoints with Bucket4j" /><published>2023-01-31T01:23:45+08:00</published><updated>2023-01-31T01:23:45+08:00</updated><id>http://localhost:4000/2023/01/31/ratelimiting</id><content type="html" xml:base="http://localhost:4000/2023/01/31/ratelimiting.html"><![CDATA[<h2 id="rate-limiting">Rate Limiting</h2>

<p><strong>Rate limiting</strong> is a strategy for limiting network traffic. It restricts client for making number of API calls within 
a certain time frame. This is required to prevent Brute force, DoS or DDos, web scraping attacks.</p>

<p>Rate limits can be applied based on tracking IP address, API keys or access tokens to an API. If we apply rate limit
based on IP Addresses, A rate limiting solution measures the amount of time between each request from each IP address,
and also measures the number of requests within a specified timeframe. If there are too many requests from a single IP
within the given timeframe, the rate limiting solution will not fulfil the IP address’s requests for a certain amount
of time.</p>

<p>So what happens to the requests if it reaches the limit.</p>

<ul>
  <li>They may be dropped/rejected for sending Too many requests - HTTP 429.</li>
  <li>They may be queued until the remaining time period is elapsed.</li>
  <li>They may be transmitted by charging for an extra requests.</li>
</ul>

<h2 id="token-bucket-algorithm">Token bucket Algorithm</h2>

<p>Consider there is a bucket which can hold n number of tokens, whose capacity is predefined. So, whenever any client 
request an API endpoint he needs to get a token from the bucket so that the request is successful. What if there is no 
token available in the bucket then the client’s request will be rejected to progress further.</p>

<p>While making this request, the tokens are being consumed by it. Simultaneously the bucket is re-filling the tokens at 
fixed rate making sure the capacity of the bucket won’t exceed at any given point of time.</p>

<p>Before implementing token-bucket algorithm, will understand some terminologies used in algorithm.</p>

<h2 id="terminologies-user-in-algorithm">Terminologies User in Algorithm:</h2>

<p><strong>Bucket</strong> - consider it is a container</p>

<p><strong>Limitations that are used by bucket can be denoted in terms of bandwidths. Bandwidth is denoted by the following terms:</strong></p>

<p><strong>Capacity</strong> - specifies how many tokens your bucket has.</p>

<p><strong>Refill</strong> - specifies how fast tokens can be refilled after it was consumed from a bucket.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- Greedy - This type of refill greedily regenerates tokens manner, it tries to add the tokens to the bucket as soon as possible.
Refill.greedy(10, Duration.ofSeconds(1));

- Interval - This type of refill regenerates tokens in an interval manner. "Interval" in opposite to "greedy" will wait until the whole period will be elapsed before regenerating the whole amount of tokens.
Refill.intervally(100, Duration.ofMinutes(1));

- IntervallyAligned - In addition to Interval it is possible to specify the time when the first refill should happen. This type can be used to configure clear interval boundary i.e. start of the second, minute, hour, day. 

InstantfirstRefillTime=ZonedDateTime.now()
		.truncatedTo(ChronoUnit.HOURS)
		.plus(1,ChronoUnit.HOURS)
		.toInstant();
	
Bandwidth.classic(400,Refill.intervallyAligned(400,Duration.ofHours(1),firstRefillTime,true));
</code></pre></div></div>

<p><strong>Initial tokens</strong> - Bucket4j extends the token-bucket algorithm by allowing to specify the initial amount of tokens for 
each bandwidth. By default, an initial amount of tokens equals to capacity and can be changed by withInitialTokens method.</p>

<h2 id="example">Example:</h2>

<p>It’s a simple Spring boot application which has UserController with three endpoints createUser, getUser and get all users. 
Rate limit is applied to all three endpoints and will see it in action.  The code can be referred from the 
Github repo: https://github.com/sbadki/appsec/tree/main</p>

<p>We are using Bucket4J, it’s a java library to implement the rate limiting which is based of token-bucket algorithm.
Provide following dependency with other required dependencies for spring boot rest API.</p>

<p>Let’s take an example, if rate limit is set to 10 requests per minute for an API. That means the capacity of the bucket
can set to 10, and we can refill it with 10 tokens per minute.</p>

<p>If we receive 8 request for first minute, which is less than the bucket capacity for a minute. Then the remaining 2
tokens will be carry forward to next minute in addition to 8 new tokens to full-fill the capacity of bucket to 10 tokens.</p>

<p>If we receive 10 requests in first 45 seconds itself, then we would need to wait another 15 seconds to serve the requests.</p>

<p><img src="https://sbadki.github.io/appsec/assets/images/ratelimit/dependency.JPG" alt="dependency.JPG" /></p>

<p>The Bucket is built with rate limit of 10 requests per minute, So the API will reject the requests if its already received 
10 requests in a time frame of 1 minute.</p>

<p><img src="https://sbadki.github.io/appsec/assets/images/ratelimit/bucket_greedy.JPG" alt="bucket_greedy.JPG" /></p>

<p>But what if all the 10 requests came in first 5 seconds which consumed all the tokens leads to spike in the application
suddenly.We can control this limit by applying multiple limits to the bucket. The bucket would serve 10 requests per 
minute but serve 5 requests in 20 seconds time window.</p>

<p><img src="https://sbadki.github.io/appsec/assets/images/ratelimit/bucket_inter.JPG" alt="bucket_inter.JPG" /></p>

<h2 id="implementation">Implementation:</h2>

<p>tryConsume will Tries to consume specified number of tokens from the bucket during the specified timeframe.
When it exceeds rate limit then it will reject the request with status code as HTTP - 429 TooManyRequests.</p>

<p><img src="https://sbadki.github.io/appsec/assets/images/ratelimit/api_ratelimits.JPG" alt="api_ratelimits.JPG" /></p>

<h2 id="result">Result:</h2>

<p>All the requests after 5 seconds got rejected.</p>

<p><img src="https://sbadki.github.io/appsec/assets/images/ratelimit/result.JPG" alt="result.JPG" /></p>]]></content><author><name></name></author><summary type="html"><![CDATA[Token-Buket rate limiting algorithm Implementation]]></summary></entry><entry><title type="html">Insecure Deserialization</title><link href="http://localhost:4000/application/security/blogs/2023/01/30/insecure-deserialization.html" rel="alternate" type="text/html" title="Insecure Deserialization" /><published>2023-01-30T12:28:45+08:00</published><updated>2023-01-30T12:28:45+08:00</updated><id>http://localhost:4000/application/security/blogs/2023/01/30/insecure-deserialization</id><content type="html" xml:base="http://localhost:4000/application/security/blogs/2023/01/30/insecure-deserialization.html"><![CDATA[<p><strong>Insecure deserialization</strong> is one of the top vulnerability in OWASP top 10 list for 2021. Insecure Deserialization is a vulnerability which occurs when untrusted data is used to abuse the logic of an application. Successful insecure deserialization attacks could allow an attacker to carry out denial-of-service (DoS) attacks, authentication bypasses and remote code execution attacks.</p>

<h2 id="serialization--deserialization">Serialization &amp; Deserialization:</h2>

<p><strong>Serialization</strong> refers to a process of converting an object into a format which can be persisted to disk (for example saved to a file or a datastore), sent through streams (for example stdout), or sent over a network. The format in which an object is serialized into, can either be binary or structured text (for example XML, JSON YAML…). JSON and XML are two of the most commonly used serialization formats within web applications.</p>

<p><strong>Deserialization</strong> on the other hand, is the opposite of serialization, that is, transforming serialized data coming from a file, stream or network socket into an object.
There are different libraries or classes for different languages for serialization/deserialization purposes such as in Python - Pickle, PHP - Serialize/Unserialize, Java - ObjectInputStream/ObjectOutputStream and in Javascript - JSON.stringfy()/JSON.parse()</p>

<p><img src="https://sbadki.github.io/appsec/assets/images/insecure-deserialization/serialization.png" alt="serialization" title="serialization" />
Courtesy: Portswigger.net</p>

<p>Many programming languages support the serialization and deserialization of objects, including Java, PHP, Python, and Ruby. It’s important to understand that safe deserialization of objects is normal practice in software development. The trouble however, starts when deserializing untrusted user input</p>

<h2 id="in-secure-deserialization-in-action">In-Secure deserialization in action:</h2>

<p><strong>Insecure deserialization</strong> is a type of vulnerability that arises when an attacker can manipulate the serialized object and pass harmful data into the application code which cause unintended consequences in the program’s flow.</p>

<p><strong>Java example:</strong>
We serialized an Employee object and deserialized it as shown below but how come the name is de-serialised as Jacob!? This is because we are able to override the readObject method of the serialized class.</p>

<p><img src="https://sbadki.github.io/appsec/assets/images/insecure-deserialization/employee.png" alt="JavaExample" title="JavaExample" /></p>

<p>Hex dump of the serialized employee object shown as below. The email id is referring to Jacob@example.com.</p>

<p><img src="https://sbadki.github.io/appsec/assets/images/insecure-deserialization/hex_dump.png" alt="HexDump" title="HexDump" /></p>

<p>After deserialization the email id is updated to attacker@example.com.</p>

<p><img src="https://sbadki.github.io/appsec/assets/images/insecure-deserialization/result.png" alt="Result" title="Result" /></p>

<p>How does this has happened? how does Serialized object is being modified on the fly during Deserialization. This is because Deserialization doesn’t call constructure while re-creating an object from Stream of Bytes, it uses reflection to re-create an object. All the magic is happened because of readObject method overridden in Employee class. These methods are also called as magic methods. Magic methods are a special subset of methods that you do not have to explicitly invoke. Instead, they are invoked automatically whenever a particular event or scenario occurs. Magic methods are a common feature of object-oriented programming in various languages like Ruby, PHP, python, Java etc.</p>

<p>So, this concludes that the Serialized objects are not secured.</p>

<p>Attackers can customize deserialization protocol for example, by overriding the readObject() function of the Java Serializable class as shown in below snippet to achieve remote code execution.</p>

<p><img src="https://sbadki.github.io/appsec/assets/images/insecure-deserialization/Vulnerable.png" alt="VulnerableObject" title="VulnerableObject" /></p>

<p>We are passing a simple command i.e. calc.exec to see the effect. We see that the ClassCastException has occurred while casting a VulnerableObj to Employee object also, the calc.exe also executed. This means any command passed to VulnerableObj will get executed during deserialization of an object. This is just a sample example to show how deserialization can make harm to the system. In reality attacker might do many harm to the system by exploiting this vulnerability.</p>

<p><img src="https://sbadki.github.io/appsec/assets/images/insecure-deserialization/serial_vulobj.png" alt="SerializedVulnerableObject" title="SerializedVulnerableObject" /></p>

<h2 id="gadgets-and-chains-">Gadgets and Chains :</h2>

<p>A gadget—as used by Lawrence &amp; Frohoff in their talk Marschalling Pickle at AppSecCali 2015—is a class or function that exists in the application which helps attacker to achieve a particular goal but a gadget may not by itself do anything harmful with user input.
The exploitation strategy is to start with a “kick-off” gadget that’s executed after deserialization and build a chain of instances and method invocations to get to a “sink” gadget that’s able to execute arbitrary code or commands. Once attackers manage to get input to a sink gadget, they can do the maximum damage by performing an arbitrary code execution.</p>

<p><img src="https://sbadki.github.io/appsec/assets/images/insecure-deserialization/gadgetchain.png" alt="GadgetChain" title="GadgetChain" />
Courtesy: https://brandur.org/fragments/gadgets-and-chains</p>

<p>Attacker needs access to the source code to identify such Gadgets and it’s a tedious task to do it manually. Fortunately, There are tools like <strong>“ysoserial”</strong> and <strong>“gadget insepctor”</strong> which helps us to identify suc Gadgets.</p>

<h2 id="testing-with-ysoserial">Testing with ysoserial:</h2>

<p><strong>ysoserial</strong> is a collection of utilities and property-oriented programming “gadget chains” discovered in common java libraries that can, under the right conditions, exploit Java applications performing unsafe deserialization of objects. The main driver program takes a user-specified command and wraps it in the user-specified gadget chain, then serializes these objects to stdout. When an application with the required gadgets on the classpath unsafely deserializes this data, the chain will automatically be invoked and cause the command to be executed on the application host. (Courtesy: https://github.com/frohoff/ysoserial)</p>

<p>We could see all these java libraries has gadget chains and if any of these library is happen to found in our applications classpath our application is vulnerable to Insecure deserialization vulnerability. So, today will take an example of commons-collections library and try to run arbitrary command.</p>

<p><img src="https://sbadki.github.io/appsec/assets/images/insecure-deserialization/ysoserial.png" alt="YSoserial" title="YSoserial" /></p>

<p><strong>Usage:</strong> java -jar ysoserial.jar [payload] ‘[command]’</p>

<p>The command will create a payload.ser file which will then try to deserialize it with our test class.</p>

<p>java.exe -jar ysoserial-all.jar CommonsCollections4 ‘calc.exe’ &gt; payload.ser</p>

<p>Test class to run the gadget chain</p>

<p><img src="https://sbadki.github.io/appsec/assets/images/insecure-deserialization/gadgettest.png" alt="GadgetChainTest" title="GadgetChainTest" /></p>

<p>We got an error but the arbitrary command ‘calc.exe’ is executed already, likewise an attacker can run any arbitrary code and can cause damage to the system.</p>

<p><img src="https://sbadki.github.io/appsec/assets/images/insecure-deserialization/gadgetresult.png" alt="GadgetChainResult" title="GadgetChainResult" /></p>

<h2 id="mitigation">Mitigation:</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>• If possible try to avoid serialization, instead use data formats like JSON or XML if there is no language constraints. 
• Use digital signatures to verify the integrity of the data by allowing only authenticated users and processes to have an access to your application. With this validation we can prevent attacks in some extent.
• If can't avoid and we are forced to implement Serialization due to their hierarchy. We can override deserialize method by throwing an exception. 
</code></pre></div></div>

<p><img src="https://sbadki.github.io/appsec/assets/images/insecure-deserialization/override.png" alt="Overiride" title="Overiride" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>• Sanitize user inputs which helps in reduce attack surface of an application. Attackers are able to use objects like cookies to insert malicious information to change user roles. In some cases, they are able to elevate their privileges to administrator rights by using a pre-existing or cached password hash from a previous session to launch DDOS, remote execution attacks.
</code></pre></div></div>

<p><strong>Note: Follow OWASP Insecure Deserialization Cheat Sheet for more details.</strong></p>

<p><strong>Github repo: https://github.com/sbadki/appsec/tree/main</strong></p>

<hr />]]></content><author><name></name></author><category term="Application" /><category term="security" /><category term="blogs" /><summary type="html"><![CDATA[Insecure deserialization is one of the top vulnerability in OWASP top 10 list for 2021. Insecure Deserialization is a vulnerability which occurs when untrusted data is used to abuse the logic of an application. Successful insecure deserialization attacks could allow an attacker to carry out denial-of-service (DoS) attacks, authentication bypasses and remote code execution attacks.]]></summary></entry></feed>